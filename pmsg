#!/usr/bin/env ruby

require "net/https"
require "thor"
require 'ostruct'
require 'rushover'
require 'awesome_print'

class PushoverMsg < Thor

  PRIORITY = { 'low' => -1, 'normal' => 0, 'high' => 1 }
  
  desc "notify", "send a pushover message"
  method_option :message, :type => :string, :aliases => '-m', :required => true, :desc => "Send a pushover message"
  method_option :title, :type => :string, :aliases => '-t', :required => false, :desc => "The title of the message"
  method_option :token, :type => :string, :aliases => '-n', :required => ENV['PUSHOVER_TOKEN'].nil?, :desc => "Pushover Token to use (uses ENV['PUSHOVER_TOKEN'] or this)"
  method_option :user, :type => :string, :aliases => '-u', :required => ENV['PUSHOVER_USER'].nil?, :desc => "Pushover user to send to (uses ENV['PUSHOVER_USER'] or this)"
  method_option :priority, :type => :string, :aliases => '-p', :required => false, :desc => PRIORITY.keys.to_s
  def notify
    @token = options.token || ENV['PUSHOVER_TOKEN']
    @user = options.user || ENV['PUSHOVER_USER']
    @client = Rushover::Client.new(@token)
    validate_user
    priority = validate_priority(options.priority)
    resp = @client.notify(@user, options.message, :priority => PRIORITY[priority], :title => options.title)
    if resp.ok?
      puts "(#{priority.upcase}) message sent: #{options.message}" 
    else
      puts "ERROR sending: #{options.message}" 
      ap :response => resp, :options => options
    end
  end

  no_tasks do
    def validate_user
      raise ArgumentError,"Invalid User #{@user}" unless @client.validate!(@user)
    end

    def validate_priority priority
      PRIORITY[priority].nil? ? PRIORITY['normal'] : priority
    end
  end

  default_task :notify
end

# Starts the process if this is being used as a script
# If this is being used as a library this will be skipped
if __FILE__ == $0
  PushoverMsg.start
end

